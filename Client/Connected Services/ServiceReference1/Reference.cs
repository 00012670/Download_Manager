//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceReference1
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IDownloadService")]
    public interface IDownloadService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDownloadService/DownloadFile", ReplyAction="http://tempuri.org/IDownloadService/DownloadFileResponse")]
        bool DownloadFile(string downloadUrl, string targetPath, int downloadId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDownloadService/DownloadFile", ReplyAction="http://tempuri.org/IDownloadService/DownloadFileResponse")]
        System.Threading.Tasks.Task<bool> DownloadFileAsync(string downloadUrl, string targetPath, int downloadId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDownloadService/GetDownloadProgress", ReplyAction="http://tempuri.org/IDownloadService/GetDownloadProgressResponse")]
        int GetDownloadProgress(int downloadId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDownloadService/GetDownloadProgress", ReplyAction="http://tempuri.org/IDownloadService/GetDownloadProgressResponse")]
        System.Threading.Tasks.Task<int> GetDownloadProgressAsync(int downloadId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDownloadService/CancelDownload", ReplyAction="http://tempuri.org/IDownloadService/CancelDownloadResponse")]
        void CancelDownload(int downloadId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDownloadService/CancelDownload", ReplyAction="http://tempuri.org/IDownloadService/CancelDownloadResponse")]
        System.Threading.Tasks.Task CancelDownloadAsync(int downloadId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDownloadService/GetRemainingTime", ReplyAction="http://tempuri.org/IDownloadService/GetRemainingTimeResponse")]
        string GetRemainingTime(int downloadId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDownloadService/GetRemainingTime", ReplyAction="http://tempuri.org/IDownloadService/GetRemainingTimeResponse")]
        System.Threading.Tasks.Task<string> GetRemainingTimeAsync(int downloadId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDownloadService/PauseDownload", ReplyAction="http://tempuri.org/IDownloadService/PauseDownloadResponse")]
        void PauseDownload(int downloadId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDownloadService/PauseDownload", ReplyAction="http://tempuri.org/IDownloadService/PauseDownloadResponse")]
        System.Threading.Tasks.Task PauseDownloadAsync(int downloadId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDownloadService/ResumeDownload", ReplyAction="http://tempuri.org/IDownloadService/ResumeDownloadResponse")]
        void ResumeDownload(int downloadId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDownloadService/ResumeDownload", ReplyAction="http://tempuri.org/IDownloadService/ResumeDownloadResponse")]
        System.Threading.Tasks.Task ResumeDownloadAsync(int downloadId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    public interface IDownloadServiceChannel : ServiceReference1.IDownloadService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    public partial class DownloadServiceClient : System.ServiceModel.ClientBase<ServiceReference1.IDownloadService>, ServiceReference1.IDownloadService
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public DownloadServiceClient() : 
                base(DownloadServiceClient.GetDefaultBinding(), DownloadServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IDownloadService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DownloadServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(DownloadServiceClient.GetBindingForEndpoint(endpointConfiguration), DownloadServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DownloadServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(DownloadServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DownloadServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(DownloadServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DownloadServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public bool DownloadFile(string downloadUrl, string targetPath, int downloadId)
        {
            return base.Channel.DownloadFile(downloadUrl, targetPath, downloadId);
        }
        
        public System.Threading.Tasks.Task<bool> DownloadFileAsync(string downloadUrl, string targetPath, int downloadId)
        {
            return base.Channel.DownloadFileAsync(downloadUrl, targetPath, downloadId);
        }
        
        public int GetDownloadProgress(int downloadId)
        {
            return base.Channel.GetDownloadProgress(downloadId);
        }
        
        public System.Threading.Tasks.Task<int> GetDownloadProgressAsync(int downloadId)
        {
            return base.Channel.GetDownloadProgressAsync(downloadId);
        }
        
        public void CancelDownload(int downloadId)
        {
            base.Channel.CancelDownload(downloadId);
        }
        
        public System.Threading.Tasks.Task CancelDownloadAsync(int downloadId)
        {
            return base.Channel.CancelDownloadAsync(downloadId);
        }
        
        public string GetRemainingTime(int downloadId)
        {
            return base.Channel.GetRemainingTime(downloadId);
        }
        
        public System.Threading.Tasks.Task<string> GetRemainingTimeAsync(int downloadId)
        {
            return base.Channel.GetRemainingTimeAsync(downloadId);
        }
        
        public void PauseDownload(int downloadId)
        {
            base.Channel.PauseDownload(downloadId);
        }
        
        public System.Threading.Tasks.Task PauseDownloadAsync(int downloadId)
        {
            return base.Channel.PauseDownloadAsync(downloadId);
        }
        
        public void ResumeDownload(int downloadId)
        {
            base.Channel.ResumeDownload(downloadId);
        }
        
        public System.Threading.Tasks.Task ResumeDownloadAsync(int downloadId)
        {
            return base.Channel.ResumeDownloadAsync(downloadId);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IDownloadService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IDownloadService))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:8733/Design_Time_Addresses/_00012670/Service1/");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return DownloadServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IDownloadService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return DownloadServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IDownloadService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IDownloadService,
        }
    }
}
